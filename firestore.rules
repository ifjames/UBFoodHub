rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for security
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(uid) {
      return request.auth.uid == uid;
    }
    
    function isValidEmail() {
      return request.auth.token.email.matches('.*@ub\\.edu\\.ph$');
    }
    
    function isEmailVerified() {
      return request.auth.token.email_verified == true;
    }
    
    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Users collection - strict access control
    match /users/{userId} {
      allow read: if isSignedIn() && isValidEmail() && 
                     (isOwner(userId) || hasRole('admin'));
      
      allow create: if isSignedIn() && isValidEmail() && isEmailVerified() &&
                       isOwner(userId) &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.email.matches('.*@ub\\.edu\\.ph$') &&
                       request.resource.data.uid == request.auth.uid;
                       
      allow update: if isSignedIn() && isValidEmail() && isEmailVerified() &&
                       (isOwner(userId) || hasRole('admin')) &&
                       request.resource.data.email == resource.data.email &&
                       request.resource.data.uid == resource.data.uid;
                       
      allow delete: if isSignedIn() && hasRole('admin');
    }
    
    // Stalls/Restaurants collection
    match /stalls/{stallId} {
      allow read: if isSignedIn() && isValidEmail();
      
      allow create: if isSignedIn() && isValidEmail() && isEmailVerified() &&
                       (hasRole('stall_owner') || hasRole('admin')) &&
                       request.resource.data.ownerId == request.auth.uid;
                       
      allow update: if isSignedIn() && isValidEmail() && isEmailVerified() &&
                       (resource.data.ownerId == request.auth.uid || hasRole('admin'));
                       
      allow delete: if isSignedIn() && hasRole('admin');
    }
    
    // Menu items collection
    match /menu_items/{itemId} {
      allow read: if isSignedIn() && isValidEmail();
      
      allow create, update: if isSignedIn() && isValidEmail() && isEmailVerified() &&
                               (get(/databases/$(database)/documents/stalls/$(request.resource.data.stallId)).data.ownerId == request.auth.uid || 
                                hasRole('admin'));
                                
      allow delete: if isSignedIn() && 
                       (get(/databases/$(database)/documents/stalls/$(resource.data.stallId)).data.ownerId == request.auth.uid || 
                        hasRole('admin'));
    }
    
    // Orders collection - strict ownership
    match /orders/{orderId} {
      allow read: if isSignedIn() && isValidEmail() &&
                     (resource.data.userId == request.auth.uid ||
                      get(/databases/$(database)/documents/stalls/$(resource.data.stallId)).data.ownerId == request.auth.uid ||
                      hasRole('admin'));
                      
      allow create: if isSignedIn() && isValidEmail() && isEmailVerified() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.status == 'pending';
                       
      allow update: if isSignedIn() && isValidEmail() && isEmailVerified() &&
                       (
                         // Customer can only update their own pending orders
                         (resource.data.userId == request.auth.uid && 
                          resource.data.status == 'pending' && 
                          request.resource.data.status in ['pending', 'cancelled']) ||
                         // Stall owner can update order status
                         (get(/databases/$(database)/documents/stalls/$(resource.data.stallId)).data.ownerId == request.auth.uid &&
                          request.resource.data.status in ['pending', 'preparing', 'ready', 'completed', 'cancelled']) ||
                         // Admin can update anything
                         hasRole('admin')
                       );
                       
      allow delete: if isSignedIn() && hasRole('admin');
    }
    
    // Order items collection
    match /order_items/{itemId} {
      allow read: if isSignedIn() && isValidEmail() &&
                     (get(/databases/$(database)/documents/orders/$(resource.data.orderId)).data.userId == request.auth.uid ||
                      hasRole('admin'));
                      
      allow create: if isSignedIn() && isValidEmail() && isEmailVerified() &&
                       get(/databases/$(database)/documents/orders/$(request.resource.data.orderId)).data.userId == request.auth.uid;
                       
      allow update, delete: if isSignedIn() && hasRole('admin');
    }
    
    // Cart items collection
    match /cart_items/{itemId} {
      allow read, create, update, delete: if isSignedIn() && isValidEmail() &&
                                             resource.data.userId == request.auth.uid;
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if isSignedIn() && isValidEmail();
      
      allow create: if isSignedIn() && isValidEmail() && isEmailVerified() &&
                       request.resource.data.userId == request.auth.uid;
                       
      allow update: if isSignedIn() && isValidEmail() &&
                       (resource.data.userId == request.auth.uid || hasRole('admin'));
                       
      allow delete: if isSignedIn() && 
                       (resource.data.userId == request.auth.uid || hasRole('admin'));
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && isValidEmail() &&
                     resource.data.userId == request.auth.uid;
                     
      allow create: if isSignedIn() && hasRole('admin');
      
      allow update: if isSignedIn() && isValidEmail() &&
                       resource.data.userId == request.auth.uid;
                       
      allow delete: if isSignedIn() && 
                       (resource.data.userId == request.auth.uid || hasRole('admin'));
    }
  }
}